// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `bank_account.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(module, require, exports)
{
    const Ice = require("ice").Ice;
    const _ModuleRegistry = Ice._ModuleRegistry;
    const Slice = Ice.Slice;

    let BankAccountServices = _ModuleRegistry.module("BankAccountServices");

    BankAccountServices.BankAccountType = Slice.defineEnum([
        ['Standard', 0], ['Premium', 1]]);

    BankAccountServices.UnauthorizedError = class extends Ice.UserException
    {
        constructor(_cause = "")
        {
            super(_cause);
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::BankAccountServices::UnauthorizedError";
        }

        _mostDerivedType()
        {
            return BankAccountServices.UnauthorizedError;
        }
    };

    BankAccountServices.InvalidArgumentError = class extends Ice.UserException
    {
        constructor(message = "", _cause = "")
        {
            super(_cause);
            this.message = message;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::BankAccountServices::InvalidArgumentError";
        }

        _mostDerivedType()
        {
            return BankAccountServices.InvalidArgumentError;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeString(this.message);
        }

        _readMemberImpl(istr)
        {
            this.message = istr.readString();
        }
    };

    BankAccountServices.AccountAlreadyExistsError = class extends Ice.UserException
    {
        constructor(_cause = "")
        {
            super(_cause);
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::BankAccountServices::AccountAlreadyExistsError";
        }

        _mostDerivedType()
        {
            return BankAccountServices.AccountAlreadyExistsError;
        }
    };

    BankAccountServices.BankAccountState = class
    {
        constructor(balance = 0.0, type = BankAccountServices.BankAccountType.Standard)
        {
            this.balance = balance;
            this.type = type;
        }

        _write(ostr)
        {
            ostr.writeFloat(this.balance);
            BankAccountServices.BankAccountType._write(ostr, this.type);
        }

        _read(istr)
        {
            this.balance = istr.readFloat();
            this.type = BankAccountServices.BankAccountType._read(istr);
        }

        static get minWireSize()
        {
            return  5;
        }
    };

    Slice.defineStruct(BankAccountServices.BankAccountState, false, true);

    BankAccountServices.BankAccountDetails = class
    {
        constructor(name = "", surname = "", pesel = "", guid = "", monthlyIncome = 0.0)
        {
            this.name = name;
            this.surname = surname;
            this.pesel = pesel;
            this.guid = guid;
            this.monthlyIncome = monthlyIncome;
        }

        _write(ostr)
        {
            ostr.writeString(this.name);
            ostr.writeString(this.surname);
            ostr.writeString(this.pesel);
            ostr.writeString(this.guid);
            ostr.writeFloat(this.monthlyIncome);
        }

        _read(istr)
        {
            this.name = istr.readString();
            this.surname = istr.readString();
            this.pesel = istr.readString();
            this.guid = istr.readString();
            this.monthlyIncome = istr.readFloat();
        }

        static get minWireSize()
        {
            return  8;
        }
    };

    Slice.defineStruct(BankAccountServices.BankAccountDetails, false, true);

    BankAccountServices.LoanRequest = class
    {
        constructor(targetCurrency = "", startTime = 0, endTime = 0, amount = 0.0)
        {
            this.targetCurrency = targetCurrency;
            this.startTime = startTime;
            this.endTime = endTime;
            this.amount = amount;
        }

        _write(ostr)
        {
            ostr.writeString(this.targetCurrency);
            ostr.writeInt(this.startTime);
            ostr.writeInt(this.endTime);
            ostr.writeFloat(this.amount);
        }

        _read(istr)
        {
            this.targetCurrency = istr.readString();
            this.startTime = istr.readInt();
            this.endTime = istr.readInt();
            this.amount = istr.readFloat();
        }

        static get minWireSize()
        {
            return  13;
        }
    };

    Slice.defineStruct(BankAccountServices.LoanRequest, false, true);

    BankAccountServices.LoanProposal = class
    {
        constructor(costLocal = 0.0, costCurrency = 0.0, currencyValue = 0.0)
        {
            this.costLocal = costLocal;
            this.costCurrency = costCurrency;
            this.currencyValue = currencyValue;
        }

        _write(ostr)
        {
            ostr.writeFloat(this.costLocal);
            ostr.writeFloat(this.costCurrency);
            ostr.writeFloat(this.currencyValue);
        }

        _read(istr)
        {
            this.costLocal = istr.readFloat();
            this.costCurrency = istr.readFloat();
            this.currencyValue = istr.readFloat();
        }

        static get minWireSize()
        {
            return  12;
        }
    };

    Slice.defineStruct(BankAccountServices.LoanProposal, false, false);

    const iceC_BankAccountServices_BankAccount_ids = [
        "::BankAccountServices::BankAccount",
        "::Ice::Object"
    ];

    BankAccountServices.BankAccount = class extends Ice.Object
    {
    };

    BankAccountServices.BankAccountPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(BankAccountServices.BankAccount, BankAccountServices.BankAccountPrx, iceC_BankAccountServices_BankAccount_ids, 0,
    {
        "getState": [, , , , [BankAccountServices.BankAccountState], [[7]], ,
        [
            BankAccountServices.UnauthorizedError
        ], , ],
        "getDetails": [, , , , [BankAccountServices.BankAccountDetails], [[7]], ,
        [
            BankAccountServices.UnauthorizedError
        ], , ]
    });

    const iceC_BankAccountServices_PremiumBankAccount_ids = [
        "::BankAccountServices::BankAccount",
        "::BankAccountServices::PremiumBankAccount",
        "::Ice::Object"
    ];

    BankAccountServices.PremiumBankAccount = class extends Ice.Object
    {
        static get _iceImplements()
        {
            return [
                BankAccountServices.BankAccount
            ];
        }
    };

    BankAccountServices.PremiumBankAccountPrx = class extends Ice.ObjectPrx
    {
        static get _implements()
        {
            return [
                BankAccountServices.BankAccountPrx];
        }
    };

    Slice.defineOperations(BankAccountServices.PremiumBankAccount, BankAccountServices.PremiumBankAccountPrx, iceC_BankAccountServices_PremiumBankAccount_ids, 1,
    {
        "requestLoan": [, , , , [BankAccountServices.LoanProposal], [[BankAccountServices.LoanRequest], [7]], ,
        [
            BankAccountServices.InvalidArgumentError,
            BankAccountServices.UnauthorizedError
        ], , ]
    });

    const iceC_BankAccountServices_BankAccountFactory_ids = [
        "::BankAccountServices::BankAccountFactory",
        "::Ice::Object"
    ];

    BankAccountServices.BankAccountFactory = class extends Ice.Object
    {
    };

    BankAccountServices.BankAccountFactoryPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(BankAccountServices.BankAccountFactory, BankAccountServices.BankAccountFactoryPrx, iceC_BankAccountServices_BankAccountFactory_ids, 0,
    {
        "createAccount": [, , , , ["BankAccountServices.BankAccountPrx"], [[7], [7], [7], [5]], [[7]],
        [
            BankAccountServices.AccountAlreadyExistsError,
            BankAccountServices.InvalidArgumentError
        ], , ]
    });
    exports.BankAccountServices = BankAccountServices;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : this.Ice._require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : this));
